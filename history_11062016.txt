Python 3.5.1 (default, Jan 27 2016, 13:31:46) 
[GCC 4.9.2] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> a = 2**12
>>> b = 2**16
>>> c = b-c
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'c' is not defined
>>> c = b-a
>>> c
61440
>>> x = 2**13-1
>>> y = 2**17-1
>>> z = y-x
>>> z
122880
>>> 61440*2
122880
>>> divmod(61440,x)
(7, 4103)
>>> divmod(122880,a)
(30, 0)
>>> divmod(122880,b)
(1, 57344)
>>> divmod(122880,61440)
(2, 0)
>>> a = 2**30
>>> b = 2**60
>>> c = b-a
>>> c
1152921503533105152
>>> x = 2**31-1
>>> y = 2**61-1
>>> z = y-x
>>> z
2305843007066210304
>>> c*2
2305843007066210304
>>> divmod(z,a)
(2147483646, 0)
>>> divmod(z,b)
(1, 1152921502459363328)
>>> a
1073741824
>>> z
2305843007066210304
>>> b
1152921504606846976
>>> bin(c)
'0b111111111111111111111111111111000000000000000000000000000000'
>>> d = bin(c)
>>> d.count(1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: Can't convert 'int' object to str implicitly
>>> d.count('1')
30
>>> d.count('0')-1
30
>>> t = bin(z)
>>> t.count('1')
30
>>> t.count('0')-1
31
>>> int('0b1000')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid literal for int() with base 10: '0b1000'
>>> int(0b1000)
8
>>> int(0b10000)
16
>>> int(0b11000)
24
>>> a = 2**3-1
>>> b = 2**5-1
>>> c = b-a
>>> c
24
>>> d = bin(c)
>>> d.count('1')
2
>>> t.count('0')-1
31
>>> d.count('0')-1
3
>>> a = 2**2-1
>>> b = 2**3-1
>>> c = b-a
>>> d = bin(c)
>>> d.count('1')
1
>>> d.count('0')-1
2
>>> a = 2**5-1
>>> b = 2**7-1
>>> c = b-a
>>> d = bin(c)
>>> d.count('1')
2
>>> d.count('0')-1
5
>>> c
96
>>> a = 2**7-1
>>> b = 2**13-1
>>> c = b-a
>>> d = bin(c)
>>> d.count('1')
6
>>> d.count('0')-1
7
>>> int(0b1111111111110000000000000)
33546240
>>> c
8064
>>> b = 2**17-1
>>> a = 2**13-1
>>> c = b-a
>>> c
122880
>>> d = bin(c)
>>> d.count('1')
4
>>> d.count('0')-1
13
>>> a = 2**17-1
>>> b = 2**19-1
>>> c = b-a
>>> c
393216
>>> d = bin(c)
>>> d.count('1')
2
>>> d.count('0')-1
17
>>> divmod(c,2)
(196608, 0)
>>> import os
>>> os.system('clear')
[3;J
0
>>> divmod(c,17)
(23130, 6)
>>> divmod(196608,23130)
(8, 11568)
>>> divmod(13,2)
(6, 1)
>>> divmod(17,2)
(8, 1)
>>> divmod(19,2)
(9, 1)
>>> divmod(24,2)
(12, 0)
>>> divmod(24,3)
(8, 0)
>>> divmod(7,4)
(1, 3)
>>> divmod(31,24)
(1, 7)
>>> divmod(127,96)
(1, 31)
>>> divmod(8191,8064)
(1, 127)
>>> divmod(131071,122880)
(1, 8191)
>>> divmod(2147483647,2146959360)
(1, 524287)
>>> divmod(2140,127)
(16, 108)
>>> 521-127
394
>>> d = bin(394)
>>> d.count('1')
4
>>> d
'0b110001010'
>>> d.count('0')-1
5
>>> 42-13
29
>>> 52-17
35
>>> 34-19
15
>>> 228-31
197
>>> divmod(2140,127)
(16, 108)
>>> divmod(2140,394)
(5, 170)
>>> divmod(2140,107)
(20, 0)
>>> divmod(2140,1602)
(1, 538)
>>> divmod(1602,127)
(12, 78)
>>> divmod(1602,107)
(14, 104)
>>> divmod(1602,18)
(89, 0)
>>> divmod(2**107-1,18)
(9014404268289631299532111682673, 13)
>>> divmod(2**107-1,18*89)
(101285441216737430331821479580, 967)
>>> divmod(2**107-1,18*89*107)
(946592908567639535811415697, 2569)
>>> divmod(2**107-1,1602)
(101285441216737430331821479580, 967)
>>> 18*89
1602
>>> divmod(2**107-1,394)
(411825575708663358861873122558, 275)
>>> divmod(2**107-1,2140)
(75822091976267926818494397330, 1927)
>>> divmod(2**107-1,127)
(1277632101017428058201401655812, 3)
>>> divmod(2**107-1,107)
(1516441839525358536369887946618, 1)
>>> divmod(2**107-1,20)
(8112963841460668169578900514406, 7)
>>> 1*2*2*6*4*2*12*30*28*18*20
696729600
>>> divmod(2**107-1,696729600)
(232887015033110927670617, 96124927)
>>> divmod(232887015033110927670617,696729600)
(334257386270241, 423837017)
>>> divmod(334257386270241,696729600)
(479751, 663940641)
>>> divmod(2**107-1,125)
(1298074214633706907132624082305, 2)
>>> divmod(394,125)
(3, 19)
>>> divmod(2**107-1,105)
(1545326445992508222776933431315, 52)
>>> divmod(2**107-1,18)
(9014404268289631299532111682673, 13)
>>> divmod(2**107-1,89)
(1823137941901273745972786632450, 77)
>>> divmod(2**107-1,107)
(1516441839525358536369887946618, 1)
>>> r = divmod(2**107-1,107)
>>> divmod(r[0],3)
(505480613175119512123295982206, 0)
>>> divmod(r[0],8)
(189555229940669817046235993327, 2)
>>> divmod(r[0],6)
(252740306587559756061647991103, 0)
>>> divmod(394,18)
(21, 16)
>>> divmod(394,89)
(4, 38)
>>> divmod(394,107)
(3, 73)
>>> divmod(394,107+20)
(3, 13)
>>> divmod(1602,107)
(14, 104)
>>> divmod(1602,394)
(4, 26)
>>> divmod(1602,127)
(12, 78)
>>> a = 2**521-1
>>> b = 2**127-1
>>> c = b-a
>>> c
-6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480857866980804539247412080886724575230951424
>>> d = a-b
>>> d
6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480857866980804539247412080886724575230951424
>>> c = a-b
>>> c
6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480857866980804539247412080886724575230951424
>>> d = bin(c)
>>> d.count('1')
394
>>> d.count('0')-1
127
>>> 394-127
267
>>> 267-127
140
>>> 140-127
13
>>> 107-20
87
>>> 87-20
67
>>> 67-20
47
>>> 47-20
27
>>> 27-20
7
>>> 89-28
61
>>> 61-28
33
>>> 33-28
5
>>> 89-18
71
>>> 71-18
53
>>> 53-18
35
>>> 35-18
17
>>> 61-28
33
>>> 33-28
5
>>> n = 5
>>> np = (2**(n-1))*((2**n)-1)
>>> np
496
>>> divmod(496,5)
(99, 1)
>>> n = 6
>>> np = (2**(n-1))*((2**n)-1)
>>> np
2016
>>> divmod(np,n)
(336, 0)
>>> divmod(336,n)
(56, 0)
>>> divmod(56,n)
(9, 2)
>>> divmod(9,n)
(1, 3)
>>> 8191-8128
63
>>> bin(63)
'0b111111'
>>> bin(496)
'0b111110000'
>>> bin(6)
'0b110'
>>> bin(28)
'0b11100'
>>> bin(496)
'0b111110000'
>>> bin(8128)
'0b1111111000000'
>>> n = 13
>>> np = (2**(n-1))*((2**n)-1)
>>> np
33550336
>>> d = bin(np)
>>> d.count('1')
13
>>> d.count('0')-1
12
>>> divmod(np,25)
(1342013, 11)
>>> divmod(np,13)
(2580795, 1)
>>> divmod(np,12)
(2795861, 4)
>>> from sympy import isprime
>>> isprime(1342013)
False
>>> isprime(2795861)
False
>>> n = 12
>>> nnp = (2**(n-1))*((2**n)-1)
>>> nnp
8386560
>>> np-nnp
25163776
>>> isprime(25163776)
False
>>> d = bin(np)
>>> d
'0b1111111111111000000000000'
>>> np
33550336
>>> d.count('1')
13
>>> d.count('0')-1
12
>>> np = 13
>>> np = (2**(n-1))*((2**n)-1)
>>> n = 13
>>> np = (2**(n-1))*((2**n)-1)
>>> np
33550336
>>> divmod(np,nnp)
(4, 4096)
>>> 2**12
4096
>>> n = 17
>>> np = (2**(n-1))*((2**n)-1)
>>> np
8589869056
>>> n = 16
>>> np = (2**(n-1))*((2**n)-1)
>>> np
2147450880
>>> n = 17
>>> np = (2**(n-1))*((2**n)-1)
>>> n = 16
>>> nnp = (2**(n-1))*((2**n)-1)
>>> divmod(np,nnp)
(4, 65536)
>>> 2**16
65536
>>> divmod(np,65536)
(131071, 0)
>>> 131071*65536
8589869056
>>> 13+16
29
>>> divmod(65536,6)
(10922, 4)
>>> divmod(65536,3)
(21845, 1)
>>> divmod(65536,8)
(8192, 0)
>>> 2**n-1
65535
>>> n
16
>>> n = 17
>>> 2**n-1
131071
>>> divmod(131072-65536)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: divmod expected 2 arguments, got 1
>>> divmod(131072,65536)
(2, 0)
>>> bin(8064)
'0b1111110000000'
>>> d = bin(8064)
>>> d.count('1')
6
>>> d.count('0')-1
7
>>> divmod(43112609,14772552)
(2, 13567505)
>>> divmod(42643801,468808)
(90, 451081)
>>> divmod(37156667,5487134)
(6, 4233863)
>>> 57885161-43112608
14772553
>>> 57885161-43112609
14772552
>>> a = 57885161-43112609
>>> divmod(74201281,a)
(5, 338521)
>>> divmod(57885161,a)
(3, 13567505)
>>> divmod(57885160,a)
(3, 13567504)
>>> 

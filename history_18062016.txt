>>> c = (a*3)+b
>>> c
127
>>> 8192/128
64.0
>>> 8192*63
516096
>>> 131072/8192
16.0
>>> 131071/8192
15.9998779296875
>>> 131071/8191
16.001831278232206
>>> 131071/8192
15.9998779296875
>>> divmod(131071,8192)
(15, 8191)
>>> 127/13
9.76923076923077
>>> 127*13
1651
>>> 127*1651
209677
>>> 8064*13
104832
>>> 8064/13
620.3076923076923
>>> 32*8
256
>>> 32*8/2
128.0
>>> 128/32/2
2.0
>>> 128*32/2
2048.0
>>> 128*32*8/2
16384.0
>>> 128*32*4/2
8192.0
>>> 8192*128*32*4/2
67108864.0
>>> 8192*128*32/2
16777216.0
>>> 8192*128/2
524288.0
>>> 131072/8192
16.0
>>> 8192*128*32/4
8388608.0
>>> 8192*128*32/8
4194304.0
>>> 8192*128*32/16
2097152.0
>>> 8192*128*32/32
1048576.0
>>> 8192*128/32
32768.0
>>> 8192*128/128
8192.0
>>> 8192*128
1048576
>>> 131072-1048576
-917504
>>> 1048576/131072
8.0
>>> 8192*128
1048576
>>> (2**13)-8192*128
-1040384
>>> 8192*128-(2**13)
1040384
>>> bin(1040384)
'0b11111110000000000000'
>>> int('0b1111111',2)
127
>>> int('0b10000000000000',2)
8192
>>> 8192/127
64.50393700787401
>>> 8192*127
1040384
>>> 8192*15
122880
>>> 8*3
24
>>> 32*3
96
>>> 14772552+43112609
57885161
>>> 16322120+57885161
74207281
>>> 24/4
6.0
>>> 96/24
4.0
>>> 8064/96
84.0
>>> 122880/8064
15.238095238095237
>>> 84/15
5.6
>>> 393216/122880
3.2
>>> 16322120/8
2040265.0
>>> 5487134-37156667
-31669533
>>> 37156667-5487134
31669533
>>> 5487134/468808
11.704437637582977
>>> divmod(16322120,8)
(2040265, 0)
>>> divmod(14772552,8)
(1846569, 0)
>>> divmod(468808,8)
(58601, 0)
>>> bin(58601)
'0b1110010011101001'
>>> divmod(32,8)
(4, 0)
>>> divmod(128,8)
(16, 0)
>>> divmod(8192,8)
(1024, 0)
>>> divmod(131072,8)
(16384, 0)
>>> divmod(16384,1024)
(16, 0)
>>> (16384*1024)
16777216
>>> divmod(524288,8)
(65536, 0)
>>> divmod(65536,16384)
(4, 0)
>>> divmod(1024,16)
(64, 0)
>>> divmod(2147483648,8)
(268435456, 0)
>>> divmod(268435456,65536)
(4096, 0)
>>> divmod(2**89,8)
(77371252455336267181195264, 0)
>>> divmod(77371252455336267181195264,268435456)
(288230376151711744, 0)
>>> divmod((288230376151711744,268435456)
... 
... )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: divmod expected 2 arguments, got 1
>>> divmod(288230376151711744,268435456)
(1073741824, 0)
>>> 4**2
16
>>> 4**4
256
>>> 4**3
64
>>> divmod(4096,4)
(1024, 0)
>>> divmod(288230376151711744,4)
(72057594037927936, 0)
>>> divmod(72057594037927936,1024)
(70368744177664, 0)
>>> bin(16384)
'0b100000000000000'
>>> d = bin(16384)
>>> d.count('0')-1
14
>>> bin(65536)
'0b10000000000000000'
>>> d = bin(65536)
>>> d.count('0')-1
16
>>> d = bin(268435456)
>>> d.count('0')-1
28
>>> divmod(77371252455336267181195264,268435456)
(288230376151711744, 0)
>>> d = bin(77371252455336267181195264)
>>> d.count('0')-1
86
>>> divmod(524288,8)
(65536, 0)
>>> 2**17-1
131071
>>> 2**17
131072
>>> 2**89
618970019642690137449562112
>>> divmod(2**89,8)
(77371252455336267181195264, 0)
>>> d = bin(77371252455336267181195264)
>>> d.count('0')-1
86
>>> divmod(2**107,8)
(20282409603651670423947251286016, 0)
>>> c = divmod(2**89,8)
>>> d = bin(c[0])
>>> d.count('0')-1
86
>>> c = divmod(2**107,8)
>>> d = bin(c[0])
>>> d.count('0')-1
104
>>> d
'0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
>>> c
(20282409603651670423947251286016, 0)
>>> c = divmod(2**61,8)
>>> c
(288230376151711744, 0)
>>> d = bin(c[0])
>>> d.count('0')-1
58
>>> d = bin(65536,8)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: bin() takes exactly one argument (2 given)
>>> d = bin(65536)
>>> d.count('0')-1
16
>>> d = bin(288230376151711744)
>>> d.count('0')-1
58
>>> d = bin(2**31)
>>> d.count('0')-1
31
>>> d = bin(2**19)
>>> d.count('0')-1
19
>>> 
[1]+  Parado                  python3.5
welton@seneca64:~$ clear

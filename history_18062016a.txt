>>> c = (a*3)+b
>>> c
127
>>> 8192/128
64.0
>>> 8192*63
516096
>>> 131072/8192
16.0
>>> 131071/8192
15.9998779296875
>>> 131071/8191
16.001831278232206
>>> 131071/8192
15.9998779296875
>>> divmod(131071,8192)
(15, 8191)
>>> 127/13
9.76923076923077
>>> 127*13
1651
>>> 127*1651
209677
>>> 8064*13
104832
>>> 8064/13
620.3076923076923
>>> 32*8
256
>>> 32*8/2
128.0
>>> 128/32/2
2.0
>>> 128*32/2
2048.0
>>> 128*32*8/2
16384.0
>>> 128*32*4/2
8192.0
>>> 8192*128*32*4/2
67108864.0
>>> 8192*128*32/2
16777216.0
>>> 8192*128/2
524288.0
>>> 131072/8192
16.0
>>> 8192*128*32/4
8388608.0
>>> 8192*128*32/8
4194304.0
>>> 8192*128*32/16
2097152.0
>>> 8192*128*32/32
1048576.0
>>> 8192*128/32
32768.0
>>> 8192*128/128
8192.0
>>> 8192*128
1048576
>>> 131072-1048576
-917504
>>> 1048576/131072
8.0
>>> 8192*128
1048576
>>> (2**13)-8192*128
-1040384
>>> 8192*128-(2**13)
1040384
>>> bin(1040384)
'0b11111110000000000000'
>>> int('0b1111111',2)
127
>>> int('0b10000000000000',2)
8192
>>> 8192/127
64.50393700787401
>>> 8192*127
1040384
>>> 8192*15
122880
>>> 8*3
24
>>> 32*3
96
>>> 14772552+43112609
57885161
>>> 16322120+57885161
74207281
>>> 24/4
6.0
>>> 96/24
4.0
>>> 8064/96
84.0
>>> 122880/8064
15.238095238095237
>>> 84/15
5.6
>>> 393216/122880
3.2
>>> 16322120/8
2040265.0
>>> 5487134-37156667
-31669533
>>> 37156667-5487134
31669533
>>> 5487134/468808
11.704437637582977
>>> divmod(16322120,8)
(2040265, 0)
>>> divmod(14772552,8)
(1846569, 0)
>>> divmod(468808,8)
(58601, 0)
>>> bin(58601)
'0b1110010011101001'
>>> divmod(32,8)
(4, 0)
>>> divmod(128,8)
(16, 0)
>>> divmod(8192,8)
(1024, 0)
>>> divmod(131072,8)
(16384, 0)
>>> divmod(16384,1024)
(16, 0)
>>> (16384*1024)
16777216
>>> divmod(524288,8)
(65536, 0)
>>> divmod(65536,16384)
(4, 0)
>>> divmod(1024,16)
(64, 0)
>>> divmod(2147483648,8)
(268435456, 0)
>>> divmod(268435456,65536)
(4096, 0)
>>> divmod(2**89,8)
(77371252455336267181195264, 0)
>>> divmod(77371252455336267181195264,268435456)
(288230376151711744, 0)
>>> divmod((288230376151711744,268435456)
... 
... )
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: divmod expected 2 arguments, got 1
>>> divmod(288230376151711744,268435456)
(1073741824, 0)
>>> 4**2
16
>>> 4**4
256
>>> 4**3
64
>>> divmod(4096,4)
(1024, 0)
>>> divmod(288230376151711744,4)
(72057594037927936, 0)
>>> divmod(72057594037927936,1024)
(70368744177664, 0)
>>> bin(16384)
'0b100000000000000'
>>> d = bin(16384)
>>> d.count('0')-1
14
>>> bin(65536)
'0b10000000000000000'
>>> d = bin(65536)
>>> d.count('0')-1
16
>>> d = bin(268435456)
>>> d.count('0')-1
28
>>> divmod(77371252455336267181195264,268435456)
(288230376151711744, 0)
>>> d = bin(77371252455336267181195264)
>>> d.count('0')-1
86
>>> divmod(524288,8)
(65536, 0)
>>> 2**17-1
131071
>>> 2**17
131072
>>> 2**89
618970019642690137449562112
>>> divmod(2**89,8)
(77371252455336267181195264, 0)
>>> d = bin(77371252455336267181195264)
>>> d.count('0')-1
86
>>> divmod(2**107,8)
(20282409603651670423947251286016, 0)
>>> c = divmod(2**89,8)
>>> d = bin(c[0])
>>> d.count('0')-1
86
>>> c = divmod(2**107,8)
>>> d = bin(c[0])
>>> d.count('0')-1
104
>>> d
'0b100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
>>> c
(20282409603651670423947251286016, 0)
>>> c = divmod(2**61,8)
>>> c
(288230376151711744, 0)
>>> d = bin(c[0])
>>> d.count('0')-1
58
>>> d = bin(65536,8)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: bin() takes exactly one argument (2 given)
>>> d = bin(65536)
>>> d.count('0')-1
16
>>> d = bin(288230376151711744)
>>> d.count('0')-1
58
>>> d = bin(2**31)
>>> d.count('0')-1
31
>>> d = bin(2**19)
>>> d.count('0')-1
19
>>> 
[1]+  Parado                  python3.5
welton@seneca64:~$ clear
[3;J
welton@seneca64:~$ cd Downloads/
welton@seneca64:~/Downloads$ ls
artifacts.jar
brazilfw-x86_64-3.0.261.iso
Estudos_casa_02062016 (1).ods
Estudos_casa_02062016.ods
libreoffice-5.0.6.3.tar.xz
M74207281 (1).zip
M74207281 (2).zip
M74207281.zip
NÃ£o confirmado 449231.crdownload
NÃ£o confirmado 599962.crdownload
NÃ£o confirmado 674416.crdownload
Oracle_VM_VirtualBox_Extension_Pack-5.0.20-106931.vbox-extpack
radiotray-0.7.3.tar.gz
stockfish-7-linux
stockfish-7-linux.zip
welton@seneca64:~/Downloads$ sudo mv libreoffice-5.0.6.3.tar.xz /opt/Libreoffice/
[sudo] senha para welton: 
welton@seneca64:~/Downloads$ clear
[3;J


welton@seneca64:~/Downloads$ python3.5
Python 3.5.1 (default, May 29 2016, 10:33:11) 
[GCC 5.3.1 20160413] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> 57885161/17425171
3.3219278594167023
>>> 74207281/22338618
3.321928017212166
>>> 74207281/17425171
4.258625697274362
>>> 57885161/12978189
4.460187858259731
>>> n = 5
>>> np = (2**n-1)*((2**n)-1)
>>> np
961
>>> n = 7
>>> np = (2**n-1)*((2**n)-1)
>>> np
16129
>>> from sympy import isprime
>>> isprime(16129)
False
>>> divmod(16322120,8)
(2040265, 0)
>>> divmod(14772552,8)
(1846569, 0)
>>> divmod(468808,8)
(58601, 0)
>>> divmod(43112609,14772552)
(2, 13567505)
>>> divmod(57885161,14772552)
(3, 13567505)
>>> divmod(57885161,16322120)
(3, 8918801)
>>> divmod(74207281,16322120)
(4, 8918801)
>>> (16322120*5)+8918801
90529401
>>> isprime(90529401)
False
>>> (16322120*4)+8918801
74207281
>>> divmod(42643801,14772552)
(2, 13098697)
>>> divmod(42643801,468808)
(90, 451081)
>>> isprime(90529403)
False
>>> for x in range(90529401,90529502):
...    if isprime(x):
...       print(x)
... 
90529441
90529469
90529477
90529501
>>> divmod(90529403,16322160)
(5, 8918603)
>>> divmod(57885161,16322160)
(3, 8918681)
>>> divmod(90529403,16322160)
(5, 8918603)
>>> divmod(16322188,8)
(2040273, 4)
>>> divmod(16322120,8)
(2040265, 0)
>>> divmod(16322196,8)
(2040274, 4)
>>> divmod(16322220,8)
(2040277, 4)
>>> divmod(16322128,8)
(2040266, 0)
>>> isprime(90529409)
False
>>> for x in range(90529502,90529602):
...    if isprime(x):
...       print(x)
... 
90529513
90529519
90529589
>>> divmod(16322238,8)
(2040279, 6)
>>> for x in range(16322120,16329999):
...    if isprime(x+74207281) == True:
...       print(x)
... 
16322160
16322188
16322196
16322220
16322232
16322238
16322308
16322328
16322376
16322386
16322388
16322412
16322416
16322440
16322448
16322460
16322502
16322526
16322538
16322542
16322566
16322596
16322616
16322622
16322656
16322658
16322668
16322688
16322698
16322710
16322712
16322740
16322742
16322790
16322832
16322838
16322868
16322878
16322908
16322910
16322926
16322932
16322940
16322952
16322962
16322982
16322986
16322992
16323000
16323022
16323046
16323058
16323066
16323112
16323130
16323168
16323196
16323202
16323232
16323262
16323286
16323288
16323298
16323340
16323366
16323370
16323372
16323378
16323396
16323400
16323420
16323462
16323486
16323528
16323546
16323592
16323598
16323606
16323622
16323636
16323648
16323658
16323678
16323688
16323700
16323702
16323772
16323802
16323820
16323828
16323832
16323858
16323882
16323892
16323898
16323928
16323942
16323946
16323960
16323970
16323982
16323996
16324002
16324012
16324018
16324092
16324098
16324110
16324120
16324126
16324150
16324210
16324228
16324240
16324276
16324278
16324302
16324306
16324312
16324338
16324348
16324396
16324410
16324416
16324438
16324462
16324486
16324488
16324492
16324506
16324516
16324518
16324528
16324540
16324548
16324572
16324582
16324626
16324630
16324656
16324686
16324690
16324708
16324752
16324780
16324788
16324848
16324852
16324858
16324866
16324896
16324900
16324932
16324936
16324950
16324956
16324960
16324968
16325016
16325068
16325100
16325136
16325178
16325206
16325232
16325248
16325298
16325332
16325362
16325368
16325400
16325422
16325428
16325440
16325452
16325500
16325506
16325508
16325530
16325548
16325578
16325592
16325608
16325620
16325622
16325626
16325628
16325652
16325662
16325712
16325730
16325748
16325758
16325796
16325820
16325886
16325892
16325916
16325958
16325962
16325970
16325976
16325982
16326010
16326012
16326040
16326042
16326082
16326102
16326112
16326126
16326130
16326196
16326208
16326210
16326220
16326226
16326238
16326286
16326348
16326352
16326378
16326388
16326412
16326432
16326438
16326450
16326466
16326472
16326478
16326480
16326486
16326532
16326550
16326562
16326570
16326586
16326588
16326600
16326618
16326628
16326658
16326672
16326696
16326720
16326726
16326742
16326748
16326772
16326790
16326832
16326856
16326858
16326898
16326912
16326958
16326970
16327006
16327012
16327038
16327048
16327062
16327066
16327068
16327078
16327110
16327132
16327140
16327180
16327192
16327230
16327248
16327278
16327288
16327308
16327312
16327318
16327330
16327348
16327360
16327386
16327420
16327428
16327468
16327470
16327476
16327486
16327498
16327522
16327530
16327546
16327552
16327578
16327600
16327606
16327626
16327650
16327672
16327678
16327710
16327720
16327750
16327752
16327798
16327818
16327840
16327888
16327896
16327948
16327962
16327986
16327992
16328026
16328028
16328050
16328082
16328158
16328176
16328218
16328238
16328272
16328280
16328292
16328322
16328328
16328338
16328350
16328382
16328400
16328410
16328442
16328448
16328478
16328482
16328506
16328512
16328520
16328530
16328566
16328568
16328572
16328578
16328620
16328646
16328656
16328662
16328676
16328698
16328716
16328740
16328748
16328778
16328782
16328790
16328800
16328806
16328842
16328848
16328872
16328880
16328896
16328898
16328902
16328928
16328938
16328946
16328958
16329016
16329052
16329070
16329078
16329096
16329108
16329112
16329136
16329138
16329208
16329300
16329310
16329316
16329342
16329400
16329402
16329408
16329420
16329478
16329496
16329532
16329538
16329556
16329558
16329628
16329640
16329652
16329678
16329688
16329702
16329708
16329720
16329736
16329742
16329756
16329766
16329768
16329786
16329852
16329856
16329870
16329882
16329940
>>> for x in range(16322120,16329999):
...    if isprime(x+74207281) == True and x % 8 == 0:
...       print(x)
... 
16322160
16322232
16322328
16322376
16322416
16322440
16322448
16322616
16322656
16322688
16322712
16322832
16322952
16322992
16323000
16323112
16323168
16323232
16323288
16323400
16323528
16323592
16323648
16323688
16323832
16323928
16323960
16324120
16324240
16324312
16324416
16324488
16324528
16324656
16324752
16324848
16324896
16324936
16324960
16324968
16325016
16325136
16325232
16325248
16325368
16325400
16325440
16325592
16325608
16325712
16325976
16326040
16326112
16326208
16326352
16326432
16326472
16326480
16326600
16326672
16326696
16326720
16326832
16326856
16326912
16327048
16327192
16327248
16327288
16327312
16327360
16327552
16327600
16327672
16327720
16327752
16327840
16327888
16327896
16327992
16328176
16328272
16328280
16328328
16328400
16328448
16328512
16328520
16328568
16328656
16328800
16328848
16328872
16328880
16328896
16328928
16329016
16329096
16329112
16329136
16329208
16329400
16329408
16329496
16329640
16329688
16329720
16329736
16329768
16329856
>>> a = 2**90529441-1
>>> b = 2**74207281-1
>>> c = a-b
>>> d = bin(c)
>>> d.count('1')
16322160
>>> d.count('0')-1
74207281
>>> divmod(74208281,16322160)
(4, 8919641)
>>> divmod(90529441,16322160)
(5, 8918641)
>>> divmod(42643801,468808)
(90, 451081)
>>> divmod(43112609,468808)
(91, 451081)
>>> divmod(37156667,5487134)
(6, 4233863)
>>> divmod(42643801,5487134)
(7, 4233863)
>>> divmod(57885161,16322120)
(3, 8918801)
>>> divmod(74207281,16322120)
(4, 8918801)
>>> divmod(43112609,16322120)
(2, 10468369)
>>> divmod(43112609,14772552)
(2, 13567505)
>>> divmod(57885161,14772552)
(3, 13567505)
>>> (16322120*4)+8918801
74207281
>>> (16322120*5)+8918801
90529401
>>> isprime(90529401)
False
>>> divmod(32582657,5487134)
(5, 5146987)
>>> divmod(37156667,5487134)
(6, 4233863)
>>> divmod(30402457,5487134)
(5, 2966787)
>>> divmod(24036583,20996011)
(1, 3040572)
>>> divmod(30402457,3040572)
(9, 3037309)
>>> divmod(32582657,2180200)
(14, 2059857)
>>> divmod(30402457,2180200)
(13, 2059857)
>>> divmod(25964951,2180200)
(11, 1982751)
>>> divmod(43112609,14772552)
(2, 13567505)
>>> divmod(57885161,14772552)
(3, 13567505)
>>> divmod(74207161,14772552)
(5, 344401)
>>> divmod(74207281,14772552)
(5, 344521)
>>> divmod(74207281,16322120)
(4, 8918801)
>>> divmod(57885161,16322120)
(3, 8918801)
>>> 74207281*7
519450967
>>> 16322120*7
114254840
>>> a = (16322120*7)+8918801
>>> a
123173641
>>> isprime(a)
False
>>> a = (16322120*5)+8918801
>>> a
90529401
>>> isprime(a)
False
>>> isprime(a+2)
False
>>> isprime(a+8)
False
>>> isprime(902529409)
False
>>> divmod(902529441,74207281)
(12, 12042069)
>>> 902529441-74207281
828322160
>>> isprime(90529409)
False
>>> isprime(90529401)
False
>>> for x in range(90529401,90429501):
...    if isprime(x) == True:
...       print(x)
... 
>>> 
>>> for x in range(90529401,90429501):
... 
  File "<stdin>", line 2
    
    ^
IndentationError: expected an indented block
>>> for x in range(90529401,90529501):
...    if isprime(x) == True:
...       print(x)
... 
90529441
90529469
90529477
>>> 90529477-74207281
16322196
>>> divmod(16322196,8)
(2040274, 4)
>>> a = 90529469-74207281
>>> divmod(a,8)
(2040273, 4)
>>> a = 90529441-74207281
>>> divmod(a,8)
(2040270, 0)
>>> a
16322160
>>> divmod(74207281,a)
(4, 8918641)
>>> divmod(90529441,a)
(5, 8918641)
>>> 
